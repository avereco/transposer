/**
 * Transposes the given text from the current key up/down the given number of
 * semitones.
 *
 * formatter is a function which takes (text, colourId) and is applied to each
 * chord. See chordSpanFormatter.
 */
function transposeSemitones(s,e,r){return transpose(s,semitoneMapper(e),r)}function transposeToKey(s,e,r){return transpose(s,function(s){return e},r)}function semitoneMapper(s){return function(e){return transposeKey(e,s)}}function transpose(s,e,r){function n(s,e){p[b[x]]={},p[b[x]].symbol=s,p[b[x]].colour=e}var t,a=null
if(void 0===r)var r={}
r.hasOwnProperty("currentKey")&&(a=r.currentKey),t=r.hasOwnProperty("formatter")?r.formatter:defaultFormatter
var o,i,f,l="",u=0,p={},c=s.split("\n")
for(a&&(o=e(a),f=transpositionMap(a,o)),k=0;k<c.length;k++){for(var d="",h=0,m=0,b=c[k].split(/(\s+)/g),x=0;x<b.length;x++)if(""!==$.trim(b[x]))if(b[x]in p)d+=t(p[b[x]].symbol,p[b[x]].colour),h++
else if(chordPattern.test(b[x])){i=XRegExp.exec(b[x],chordPattern),a||(a="m"==i.suffix||"min"==i.suffix?minors[i.chord]:i.chord,o=e(a),f=transpositionMap(a,o))
var y=transposeToken(f,i)
n(y,u),d+=t(y,u),u++,h++}else d+=b[x],m++
else d+=b[x]
l+=h>m/2?d:c[k],l+="\n"}return{text:l,key:o,semitones:semitonesBetween(a,o)}}function transposeToken(s,e){try{var r=s[e.chord],n=void 0===e.suffix?"":e.suffix,t=void 0===e.bass?"":s[e.bass]}catch(a){return alert(a),""}return t?r+n+"/"+t:r+n}function transpositionMap(s,e){var r={}
semitones=semitonesBetween(s,e),keys[e].flats>0?scale=flats:scale=sharps
for(var n=0;N_KEYS>n;n++)r[flats[n]]=scale[(n+semitones+N_KEYS)%N_KEYS],r[sharps[n]]=scale[(n+semitones+N_KEYS)%N_KEYS]
return r}function semitonesBetween(s,e){if(!(s in keys))throw s+" is not a valid key signature!"
if(!(e in keys))throw e+" is not a valid key signature!"
return keys[e].index-keys[s].index}function transposeKey(s,e){if(!(s in keys))throw s+" is not a valid key signature!"
var r=(keys[s].index+e+N_KEYS)%N_KEYS
for(var n in keys)if(keys[n].index==r)return n
return null}function chordSpanFormatter(s,e){return colour=colours[e%colours.length],"<span class='chord' style='color: #"+colour+"'>"+s+"</span>"}function defaultFormatter(s,e){return s}var flats=["C","Db","D","Eb","E","F","Gb","G","Ab","A","Bb","Cb"],sharps=["C","C#","D","D#","E","F","F#","G","G#","A","A#","B"],keys={C:{index:0,sharps:0,flats:0},Db:{index:1,sharps:0,flats:5},D:{index:2,sharps:2,flats:0},Eb:{index:3,sharps:0,flats:3},E:{index:4,sharps:4,flats:0},F:{index:5,sharps:0,flats:1},"F#":{index:6,sharps:6,flats:0},G:{index:7,sharps:1,flats:0},Ab:{index:8,sharps:0,flats:4},A:{index:9,sharps:3,flats:0},Bb:{index:10,sharps:0,flats:2},B:{index:11,sharps:5,flats:0}},minors={C:"Eb",Db:"F",D:"F",Eb:"Gb",E:"G",F:"Ab","F#":"A",G:"Bb",Ab:"Cb",A:"C",Bb:"Db",B:"D"},N_KEYS=12,chordPattern=XRegExp("^(?<chord>[A-G](#|b)?)(?<suffix>(\\(?(M|maj|major|m|min|minor|dim|sus|dom|aug|\\+|-|add)?\\d*\\)?)*)(\\/(?<bass>[A-G](#|b)?))?$"),colours=themes[0].colours
